paths:
  /user/registerUser:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
              example:
                message: User registered successfully
                type: success
                data:
                  _id: 685223f47c989e1290e959c4
                  name: jui
                  email: jui@gmail.com
                  mobileNumber: "1234567654"
                  role: user
        '400':
          description: Invalid input

  /user/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                message: Login successful
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9......
        '401':
          description: Invalid User

  /user/getAllUsers:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - _id: 68517e61e905ad8b90e7848d
                  name: jagriti
                  email: jagriti@gmail.com
                  mobileNumber: "4444554444"
                  role: admin
                  createdAt: "2025-06-17T14:40:33.650Z"
                - _id: 685223f47c989e1290e959c4
                  name: jui
                  email: jui@gmail.com
                  mobileNumber: "1234567654"
                  role: user
                  createdAt: "2025-06-18T02:27:00.575Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect password
                  type:
                    type: string
                    example: failed
                  userData:
                    type: array
                    items: {}
                    example: []

components:
  schemas:
    # Request Schemas
    UserRegister:
      type: object
      required: [name, email, password, mobileNumber]
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        mobileNumber:
          type: string
        role:
          type: string
          enum: [admin, user]

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    # Response Schemas
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        mobileNumber:
          type: string
        role:
          type: string
        createdAt:
          type: string
          format: date-time

    UserRegisterResponse:
      type: object
      properties:
        message:
          type: string
        type:
          type: string
        data:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9......

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
